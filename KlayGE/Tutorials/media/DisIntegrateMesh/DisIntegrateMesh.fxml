<?xml version='1.0'?>

<effect>
  <include name="util.fxml"/>

  <parameter type="sampler" name="point_sampler">
    <state name="filtering" value="min_mag_mip_point"/>
    <state name="address_u" value="clamp"/>
    <state name="address_v" value="clamp"/>
  </parameter>

  <parameter type="sampler" name="bilinear_sampler">
    <state name="filtering" value="min_mag_linear_mip_point"/>
    <state name="address_u" value="wrap"/>
    <state name="address_v" value="wrap"/>
    <state name="address_w" value="wrap"/>
  </parameter>

  <parameter type="float" name="point_radius"/>
  <parameter type="float4" name="init_pos_life"/>

  <cbuffer name="per_frame">
    <parameter type="float4x4" name="View"/>
    <parameter type="float4x4" name="Proj"/>
    <parameter type="float4x4" name="mvp"/>
    <parameter type="float4x4" name="inv_view"/>
    <parameter type="float4x4" name="inv_proj"/>

    <parameter type="float" name="far_plane"/>
  </cbuffer>

  <parameter type="texture2D" name="particle_tex"/>
  <parameter type="texture2D" name="scene_tex"/>

  <shader>
    <![CDATA[
struct PS_IN
{
	float4 pos : SV_Position;
	float4 clr : COLOR0;
	float4 PosSS : TEXCOORD0;
	float4 CenterView : TEXCOORD1;
	float3 view_dir : TEXCOORD2;
	float2 tex : TEXCOORD3;
};
		]]>
  </shader>

  <shader>
    <![CDATA[
float4 ParticlesPS(PS_IN ps_in) : SV_Target
{
	ps_in.CenterView /= ps_in.CenterView.w;
	float3 intersect = ps_in.view_dir;
	
	float life = ps_in.clr.a;
	float4 clr = particle_tex.Sample(bilinear_sampler, ps_in.tex);
	/*
	float2 tex_coord = ps_in.PosSS.xy / ps_in.PosSS.w;
	tex_coord.y *= KLAYGE_FLIPPING;
	tex_coord = tex_coord / 2 + 0.5f;

	float depth = scene_tex.SampleLevel(point_sampler, tex_coord, 0).a * far_plane;
	float optical_depth = depth - intersect.z;
		
	if (optical_depth < 0)
	{
		clr = 0;
	}
	else
	{
		optical_depth = min(optical_depth, clr.w);
		float4 intersect_ws = mul(float4(intersect, 1), inv_view);
		float3 normal = clr.xyz * 2 - 1;
		clr = float4(normal.xyz, optical_depth * clr.w * saturate(life / init_pos_life.w));
	}*/
	
	return clr;
}
		]]>
  </shader>

  <shader type="vertex_shader">
    <![CDATA[
void ParticlesVS3(float4 pos : POSITION,
					out float4 CenterView_Life : SV_Position)
{
	CenterView_Life = float4(mul(float4(pos.xyz, 1), View).xyz, pos.w);
}
		]]>
  </shader>

  <shader type="geometry_shader" version="4">
    <![CDATA[
[maxvertexcount(4)]
void ParticlesGS(point float4 input[1] : SV_Position, inout TriangleStream<PS_IN> out_stream)
{
	float4 CenterView_Life = input[0];

	if (CenterView_Life.w > 0)
	{
		PS_IN gs_out;

		for (int i = 0; i < 4; ++ i)
		{
			float2 tex = float2((i & 1) ? 1 : -1, (i & 2) ? -1 : 1);

			float4 view_pos = float4(CenterView_Life.xyz, 1);
			gs_out.CenterView = view_pos;
			view_pos.xy += tex * point_radius;
			gs_out.pos = mul(view_pos, Proj);
			gs_out.clr = float4(1, 1, 1, CenterView_Life.w);
			gs_out.PosSS = gs_out.pos;
			gs_out.view_dir = view_pos.xyz;
			gs_out.tex = tex * 0.5f + 0.5f;

			out_stream.Append(gs_out);
		}
	}
}
		]]>
  </shader>

  <technique name="ParticlesWithGSSO">
    <pass name="p0">
      <state name="depth_enable" value="false"/>
      <state name="depth_write_mask" value="0"/>

      <state name="blend_enable" value="true"/>
      <state name="blend_op" value="add"/>
      <state name="src_blend" value="one"/>
      <state name="dest_blend" value="one"/>
      <state name="blend_op_alpha" value="add"/>
      <state name="src_blend_alpha" value="one"/>
      <state name="dest_blend_alpha" value="one"/>

      <state name="vertex_shader" value="ParticlesVS3()"/>
      <state name="geometry_shader" value="ParticlesGS()"/>
      <state name="pixel_shader" value="ParticlesPS()"/>
    </pass>
  </technique>

  <parameter type="float" name="elapse_time"/>
  <parameter type="float" name="particle_velocity"/>

  <parameter type="rw_buffer" elem_type="float4" name="particle_pos_rw_buff"/>

  <shader type="compute_shader" version="5">
    <![CDATA[
[numthreads(256, 1, 1)]
void UpdateCS(uint3 dtid : SV_DispatchThreadID)
{
	float4 out_pos;

	uint id = dtid.x;

	float4 cur_pos = particle_pos_rw_buff[id];
	if (cur_pos.w > 0)
	{
		cur_pos.xyz += float3(0, particle_velocity, 0) * elapse_time;
		cur_pos.w -= elapse_time;

		out_pos = cur_pos;
	}
	else
	{
		out_pos = float4(0, 0, 0, -1);
	}

	particle_pos_rw_buff[id] = out_pos;
}
		]]>
  </shader>

  <technique name="UpdateCS">
    <pass name="p0">
      <state name="compute_shader" value="UpdateCS()"/>
    </pass>
  </technique>
</effect>
